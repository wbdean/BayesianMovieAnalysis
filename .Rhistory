# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/master/4181/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
h2o.init()
h20.init()
h2o.init()
h2o.init()
?h2o.init
h2o.init(startH2O = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(mvtnorm)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
df <- read.table("boxoffice.txt", header = TRUE)
df$year <- df$year - min(df$year)
X <- matrix(c(rep(1, nrow(df)), df$year), ncol = 2)
y <- df$GrossBoxOffice
plot(X[, 2], y, type = "l", main = "Gross Box Office Sales",
xlab = "Years since 1976", ylab = "Gross Box Office Sales")
acf(y, main = "")
S <- 10000
# Prior Information
fit <- lm(y ~ X - 1); summ <- summary(fit)
B0 <- c(0, 0)
S0 <- nrow(X) * summ$sigma^2 *solve(t(X) %*% X); iS0 <- solve(S0)
nu0 <- 1; s20 <- summ$sigma^2
rBeta <- function(sigma2) {
Sn = solve(iS0 + t(X) %*% X / sigma2)
Bn = Sn %*% ( iS0 %*% B0 + t(X) %*% y / sigma2 )
return( rmvnorm(1, Bn, Sn))
}
rsigma2 <- function(Beta) {
yXB = y - X %*% Beta
SSR = t(yXB) %*%  yXB
return( 1 / rgamma(1, (nu0 + n) / 2, (nu0 * s20 + SSR) / 2))
}
# Prior
n <- nrow(X); p <- ncol(X)
beta <- c(0, 0); s2 <- c(s20)
for (s in 1:S) {
# Sample Beta
beta <- rbind(beta, rBeta(s2[length(s2)]))
# Sample Sigma2
s2 <- c(s2, rsigma2(beta[nrow(beta), ]))
}
# Create Covariance matrix
covmat <- function(phi) {
x = 1:nrow(X)
phi ^ abs(outer(x, x, "-"))
}
# Sample Full Conditional B
rBeta <- function(icovmat, sigma2) {
Sn = solve((t(X) %*% icovmat %*% X) / sigma2 + iS0)
Bn = Sn %*% ( (t(X) %*% icovmat %*% y) / sigma2 + iS0 %*% B0 )
return(rmvnorm(1, Bn, Sn))
}
# Sample Full Conditional Sigma2
rsigma2 <- function(icovmat, Beta) {
yXB = y - (X %*% Beta)
SSRp = t(yXB) %*% icovmat %*% yXB
return( 1 / rgamma(1, (nu0 + n) / 2, (nu0 * s20 + SSRp) / 2))
}
# Metro Hastings phi
rphi <- function(phi, Beta, sigma2) {
phi.star = runif(1, phi - delta, phi + delta)
phi.star = ifelse(phi.star < 0, abs(phi.star),
ifelse(phi.star > 1, 2 - phi.star, phi.star))
log.r = dmvnorm(y, X %*% Beta, sigma = sigma2 * covmat(phi.star), log = TRUE) -
dmvnorm(y, X %*% Beta, sigma = sigma2 * covmat(phi), log = TRUE)
if (log(runif(1)) < log.r) {
return( phi.star )
} else {
return( phi )
}
}
# Metropolis Hastings
S <- 10000
# Prior Information
iS0 <- solve(S0)
delta <- .01
BETA <- c(0, 0); SIGMA2 <- c(s20); PHI <- c(.923)
for (s in 1:S) {
# Sample Beta
phi <- PHI[length(PHI)]
ico <- (covmat(phi))
BETA <- rbind(BETA, rBeta(ico, SIGMA2[length(SIGMA2)]))
# Sample Sigma2
SIGMA2 <- c(SIGMA2, rsigma2(ico, BETA[nrow(BETA), ]))
# Update Phi
PHI <- c(PHI, rphi(phi, BETA[nrow(BETA), ], SIGMA2[length(SIGMA2)]))
}
cat("Intercept:", mean(beta[, 1]), "\n")
cat("Slope:", mean(beta[, 2]), "\n")
cat("Sigma:", sqrt(mean(s2)))
cat("Intercept:", mean(BETA[, 1]), "\n")
cat("Slope:", mean(BETA[, 2]), "\n")
cat("Sigma:", sqrt(mean(SIGMA2)), "\n")
cat("Phi:", mean(PHI))
plot(beta[-1, ], col = "blue",
main = "Comparison of OLS and GLS Parameters",
xlab = "Intercept", ylab = "Slope")
points(BETA[-1, ], col = "red")
legend("topright", text.col = c("blue", "red"),
legend = c("OLS", "GLS"))
plot(y, main = "Bands for Regressions",
xlab = "Years since 1976",
ylab = "Gross Box Office Sales")
for (i in 2:nrow(beta)) abline(beta[i, ], col = "blue")
for (i in 2:nrow(BETA)) abline(BETA[i, ], col = "red")
points(1:length(y), y, cex = 1, type = "p", pch = 16)
legend("topleft", text.col = c("blue", "red"),
legend = c("OLS", "GLS"))
get_acf <- function(Y) {
ac = acf(Y, plot = FALSE)$acf[c(2, 3)]
return(ac)
}
# OLS
y.ols.acf <- apply(y.ols, 2, get_acf)
# Sample from the OLS
sample.ols <- function(B, s2) {
y.ols = X %*% B + rnorm(nrow(X), 0, sqrt(s2))
return(y.ols)
}
y.ols <- sapply(1:nrow(beta), function(i) sample.ols(beta[i, ], s2[i]))
# Sample from GLS
sample.gls <- function(B, s2, phi) {
y.gls = X %*% B + as.numeric(rmvnorm(1, sigma = s2 * covmat(phi)))
return(y.gls)
}
y.gls <- sapply(1:nrow(BETA), function(i) sample.gls(BETA[i, ], SIGMA2[i], PHI[i]))
plot(y, main = "Comparison of OLS Posterior Predictions",
xlab = "Years since 1976", ylab = "Gross Box Office Sales")
for (i in sample(1:nrow(beta), 4)) points(y.ols[, i], type = "l", col = "blue")
points(y, type = "l")
plot(y, main = "Comparison of GLS Posterior Predictions",
xlab = "Years since 1976", ylab = "Gross Box Office Sales")
for (i in sample(1:nrow(BETA), 4)) points(y.gls[, i], type = "l", col = "red")
points(y, type = "l")
get_acf <- function(Y) {
ac = acf(Y, plot = FALSE)$acf[c(2, 3)]
return(ac)
}
# OLS
y.ols.acf <- apply(y.ols, 2, get_acf)
# GLS
y.gls.acf <- apply(y.gls, 2, get_acf)
# Compare
# OLS
plot(t(y.ols.acf[, -1]), main = "Comparison of ACF to OLS Posterior Predictions",
xlab = "Lag 2", ylab = "Lag 3",
col = "blue")
acf.y <- get_acf(y)
points(acf.y[1], acf.y[2], pch = 16)
# GLS
plot(t(y.gls.acf[, -1]), main = "Comparison of ACF to GLS Posterior Predictions",
xlab = "Lag 2", ylab = "Lag 3",
col = "red")
points(acf.y[1], acf.y[2], pch = 16)
# Number of new samples
N <- 15
# Sample from the OLS
sample.ols.new <- function(B, s2, n = N) {
y.ols = matrix(c(rep(1, nrow(X) + n), 0:(nrow(X) - 1 + n)),
ncol = 2) %*% B +
rnorm(nrow(X) + n, 0, sqrt(s2))
return(y.ols)
}
y.ols <- sapply(1:nrow(beta), function(i) sample.ols.new(beta[i, ], s2[i]))
# Sample from GLS
sample.gls.new <- function(B, s2, phi, n = N) {
# Create Covariance matrix
covmat.new = function(phi) {
x = 1:(nrow(X) + n)
phi ^ abs(outer(x, x, "-"))
}
y.gls = matrix(c(rep(1, nrow(X) + n), 0:(nrow(X) - 1 + n)),
ncol = 2) %*% B +
as.numeric(rmvnorm(1, sigma = s2 * covmat.new(phi)))
return(y.gls)
}
y.gls <- sapply(1:nrow(BETA), function(i) sample.gls.new(BETA[i, ], SIGMA2[i], PHI[i]))
## New
y.ols.new <- y.ols[33:(33 + N - 1), ]
y.gls.new <- y.gls[33:(33 + N - 1), ]
## Plot New Points
x <- rep(1:N, ncol(y.ols.new) - 1)
plot(jitter(x) - .25, as.numeric(y.ols.new[, -1]), col = "blue",
xlim = c(0.5, N + .5), ylim = c(400, 2000),
xlab = "Years since Observed Data", ylab = "Gross Box Office",
main = paste("Predictions for Next", N, "Years"))
points(jitter(x) + .25, as.numeric(y.gls.new[, -1]), col = "red")
dim(y.ols)
View(X)
y.ols.new
dim(y.ols.new)
## Plot New Points
x <- rep(1:N, ncol(y.ols.new) - 1)
plot(jitter(x) - .25, as.numeric(y.ols.new[, -1]), col = "blue",
xlim = c(0.5, N + .5), ylim = c(400, 2000),
xlab = "Years since Observed Data", ylab = "Gross Box Office",
main = paste("Predictions for Next", N, "Years"))
points(jitter(x) + .25, as.numeric(y.gls.new[, -1]), col = "red")
legend("topleft", text.col = c("blue", "red"),
legend = c("OLS", "GLS"))
## Plot New Points
x <- rep(1:N, ncol(y.ols.new) - 1)
plot(jitter(x) - .25, as.numeric(y.ols.new[, -1]), col = "blue",
xlim = c(0.5, N + .5), ylim = c(400, 2000),
xlab = "Years since Observed Data", ylab = "Gross Box Office",
main = paste("Predictions Confidence Intervals for Next", N, "Years"))
points(jitter(x) + .25, as.numeric(y.gls.new[, -1]), col = "red")
legend("topleft", text.col = c("blue", "red"),
legend = c("OLS", "GLS"))
dim(y.ols)
dim(y.ols[30:32])
dim(y.ols[30:32, ])
plot(y.ols[30:32, ])
plot(t(y.ols[30:32, ]))
plot(t(y.ols[3:32, ]))
plot(t(y.ols[30:32, ]))
plot(t(y.gls[30:32, ]))
last.obs.ols <- y.ols[32, ]
y.ols.sim <- y.ols[, last.obs.ols > mean(last.obs.ols) ]
last.obs.gls <- y.gls[32, ]
y.gls.sim <- y.gls[, last.obs.gls > mean(last.obs.gls)]
dim(y.ols.sim)
df$GrossBoxOffice[30:32]
y.ols[30:32]
y.ols[30:32, ]
y.ols[30:32, ] %>% dim
y.ols[30:32, ] %>% t %>%  dim
y.ols[30:32, ] %>% t %>%  dim %>% apply(2, function(x) return(sum((x - df$GrossBoxOffice[30:32])^2)))
y.ols[30:32, ] %>% t %>% apply(2, function(x) return(sum((x - df$GrossBoxOffice[30:32])^2)))
df$GrossBoxOffice[30:32]
rep(2, df$GrossBoxOffice[30:32])
rep(df$GrossBoxOffice[30:32], times = 2)
rep(df$GrossBoxOffice[30:32], times = 2) %>% matrix(ncol = 3, byrow = TRUE)
dim(y.ols)
dist_ts <- function(y) {
# Number of replications
n = ncol(y)
# Number of observations to compare
n.row <- nrow(y)
# Matrix of repeated values from our data
df.mat = rep(df$GrossBoxOffice[(32 - n.row + 1):32], times = n) %>%
matrix(ncol = n)
# Get L2 Distance between the last n.row data points and our predicted
diff.mat = apply((y - df.mat)^2, 1, sum)
return(diff.mat)
}
diff.ols <- dist_ts(y.ols[30:32])
diff.ols <- dist_ts(y.ols[30:32, ])
dist_ts <- function(y) {
# Number of replications
n = ncol(y)
# Number of observations to compare
n.row <- nrow(y)
# Matrix of repeated values from our data
df.mat = rep(df$GrossBoxOffice[(32 - n.row + 1):32], times = n) %>%
matrix(ncol = n)
# Get L2 Distance between the last n.row data points and our predicted
diff.mat = apply((y - df.mat)^2, 2, sum)
return(diff.mat)
}
diff.ols <- dist_ts(y.ols[30:32, ])
hist(diff.ols)
boxplot(diff.ols)
diff.gls <- dist_ts(y.gls[30:32, ])
hist(diff.gls)
hist(diff.ols)
dist_ts <- function(y) {
# Number of replications
n = ncol(y)
# Number of observations to compare
n.row <- nrow(y)
# Matrix of repeated values from our data
df.mat = rep(df$GrossBoxOffice[(32 - n.row + 1):32], times = n) %>%
matrix(ncol = n)
# Get L2 Distance between the last n.row data points and our predicted
diff.mat = apply((y - df.mat)^2, 2, sum)
return(diff.mat)
}
diff.ols <- dist_ts(y.ols[29:32, ])
diff.gls <- dist_ts(y.gls[29:32, ])
hist(diff.ols)
mean(diff.ols)
median(diff.ols)
median(diff.gls)
y.ols
dim(y.ols)
y.ols.close <- y.ols[, diff.ols < median(diff.ols)]
y.gls.close <- y.gls[, diff.gls < median(diff.gls)]
y.ols.close
y.ols.close %>% dim
quantile(diff.ols, .10)
quantile(diff.gls, .10)
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
dim(y.gls.close)
plot(y.gls.close[ ,1 ])
plot(y.gls.close[ ,1 ], type = "l")
points(df$GrossBoxOffice, type = "l", col  = "red")
points(y.gls.close[, 2], type = "l", col  = "red")
for (i in 3:ncol(y.gls.close)) {points(y.gls.close[, i], type = "l", col  = "red")}
diff.ols <- dist_ts(y.ols[1:32, ])
diff.gls <- dist_ts(y.gls[1:32, ])
diff.ols
hist(diff.ols)
hist(diff.gls)
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
plot(df$GrossBoxOffice, type = "l")
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
dist_ts <- function(y) {
# Number of replications
n = ncol(y)
# Number of observations to compare
n.row <- nrow(y)
# Matrix of repeated values from our data
df.mat = rep(df$GrossBoxOffice[(32 - n.row + 1):32], times = n) %>%
matrix(ncol = n)
# Get L2 Distance between the last n.row data points and our predicted
diff.mat = apply((y - df.mat)^2, 2, sum)
return(diff.mat)
}
diff.ols <- dist_ts(y.ols[29:32, ])
diff.gls <- dist_ts(y.gls[29:32, ])
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
dim(y.ols.close)
plot(y.ols.close[-1:32, ])
plot(y.ols.close[-c(1:32), ])
plot(y.ols.close[-c(1:32), 1])
plot(y.ols.close[-c(1:32), 1], type = "l")
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(900, 1300))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "l", col = "blue")
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(900, 1300))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "l", col = "blue")
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(900, 1300))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "l", col = "blue")}
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(900, 1300))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "p", col = "blue")}
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(700, 1500))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "p", col = "blue")}
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "p", col = "blue")}
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "p", col = "blue")}
for (i in 1:ncol(y.gls.gls)) {points(y.gls.close[-c(1:32), i], type = "p", col = "red")}
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "p", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32), i], type = "p", col = "red")}
dim(y.ols.clsoe)
dim(y.ols.clsee)
dim(y.ols.close)
plot(y.ols.close[-c(1:32, 37:47), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32, 37:47), i], type = "p", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32, 37:47), i], type = "p", col = "red")}
plot(y.ols.close[-c(1:32, 38:47), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32, 38:47), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32, 38:47), i], type = "l", col = "red")}
diff.ols <- dist_ts(y.ols[25:32, ])
diff.gls <- dist_ts(y.gls[25:32, ])
# Top Ten percent of closest time series to our data
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
plot(y.ols.close[-c(1:32, 38:47), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32, 38:47), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32, 38:47), i], type = "l", col = "red")}
diff.ols <- dist_ts(y.ols[1:32, ])
diff.gls <- dist_ts(y.gls[1:32, ])
# Top Ten percent of closest time series to our data
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
plot(y.ols.close[-c(1:32, 38:47), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32, 38:47), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32, 38:47), i], type = "l", col = "red")}
y.ols.close[-c(1:32, 38:47), ] %>% dim
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975)))
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975)))
y.gls.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975)))
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(1, range)
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(1, function(x) max(x) - min(x))
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975)))
?apply
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
dist_ts <- function(y) {
# Number of replications
n = ncol(y)
# Number of observations to compare
n.row <- nrow(y)
# Matrix of repeated values from our data
df.mat = rep(df$GrossBoxOffice[(32 - n.row + 1):32], times = n) %>%
matrix(ncol = n)
# Get L2 Distance between the last n.row data points and our predicted
diff.mat = apply((y - df.mat)^2, 2, sum)
return(diff.mat)
}
diff.ols <- dist_ts(y.ols[29:32, ])
diff.gls <- dist_ts(y.gls[29:32, ])
# Top Ten percent of closest time series to our data
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
plot(y.ols.close[-c(1:32, 38:47), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32, 38:47), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32, 38:47), i], type = "l", col = "red")}
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
%>% apply(2, function(x) max(x) - min(x))
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
dist_ts <- function(y) {
# Number of replications
n = ncol(y)
# Number of observations to compare
n.row <- nrow(y)
# Matrix of repeated values from our data
df.mat = rep(df$GrossBoxOffice[(32 - n.row + 1):32], times = n) %>%
matrix(ncol = n)
# Get L2 Distance between the last n.row data points and our predicted
diff.mat = apply((y - df.mat)^2, 2, sum)
return(diff.mat)
}
diff.ols <- dist_ts(y.ols[30:32, ])
diff.gls <- dist_ts(y.gls[30:32, ])
# Top Ten percent of closest time series to our data
y.ols.close <- y.ols[, diff.ols < quantile(diff.ols, .10)]
y.gls.close <- y.gls[, diff.gls < quantile(diff.gls, .10)]
plot(y.ols.close[-c(1:32, 38:47), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32, 38:47), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32, 38:47), i], type = "l", col = "red")}
y.ols.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close[-c(1:32, 38:47), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.ols.close[-c(1:32), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close[-c(1:32), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32), i], type = "l", col = "red")}
install.packages("dtw")
install.packages("dtw")
library(dtw)
install.packages("proxy")
library(dtw)
dtw(df$GrossBoxOffice, df$GrossBoxOffice)
dist <- dtw(df$GrossBoxOffice, df$GrossBoxOffice)
dist$distance
dtw(y.ols[1:32, 1], df$GrossBoxOffice)$distance
dtw(y.ols[1:32, 2], df$GrossBoxOffice)$distance
dtw(y.ols[1:32, 3], df$GrossBoxOffice)$distance
diff.ols2 <- sapply(1:ncol(y.ols), function(i) dtw(y.ols[1:32, i], df$GrossBoxOffice)$distance)
hist(diff.ols)
hist(diff.ols2)
diff.gls2 <- sapply(1:ncol(y.ols), function(i) dtw(y.gls[1:32, i], df$GrossBoxOffice)$distance)
hist(diff.gls2)
y.ols.close2 <- y.ols[, diff.ols2 < quantile(diff.ols2, .10)]
y.gls.close2 <- y.ols[, diff.gls2 < quantile(diff.gls2, .10)]
y.ols.close
y.ols.close[ , 1]
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close2)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close2)) {points(y.ols.close[, i], col = "blue")}
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[, i], col = "red")}
for (i in 1:ncol(y.ols.close)) {points(y.ols.close[, i], col = "blue")}
plot(df$GrossBoxOffice, type = "l", xlab = "Years since 1976")
for (i in 1:ncol(y.gls.close2)) {points(y.gls.close2[, i], col = "red")}
for (i in 1:ncol(y.ols.close2)) {points(y.ols.close2[, i], col = "blue")}
plot(y.ols.close[-c(1:32), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close)) {points(y.ols.close[-c(1:32), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close)) {points(y.gls.close[-c(1:32), i], type = "l", col = "red")}
plot(y.ols.close2[-c(1:32), 1], type = "l", ylim = c(600, 1600))
for (i in 2:ncol(y.ols.close2)) {points(y.ols.close2[-c(1:32), i], type = "l", col = "blue")}
for (i in 1:ncol(y.gls.close2)) {points(y.gls.close2[-c(1:32), i], type = "l", col = "red")}
y.ols.close[-c(1:32), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close[-c(1:32), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.ols.close2[-c(1:32), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
y.gls.close2[-c(1:32), ] %>% apply(1, function(x) quantile(x, c(.025, .975))) %>% apply(2, function(x) max(x) - min(x))
